-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
--TEST github issue 1650 character segment by column
CREATE TABLE test_chartab ( job_run_id INTEGER NOT NULL, mac_id CHAR(16) NOT NULL, rtt INTEGER NOT NULL, ts TIMESTAMP(3) NOT NULL );
SELECT create_hypertable('test_chartab', 'ts', chunk_time_interval => interval '1 day', migrate_data => true);
WARNING:  column type "timestamp without time zone" used for "ts" does not follow best practices
     create_hypertable     
---------------------------
 (1,public,test_chartab,t)
(1 row)

insert into test_chartab
values(8864, '0014070000006190' , 392 , '2019-12-14 02:52:05.863');
insert into test_chartab
values( 8864 , '0014070000011039' , 150 , '2019-12-14 02:52:05.863');
insert into test_chartab
values( 8864 , '001407000001DD2E' , 228 , '2019-12-14 02:52:05.863');
insert into test_chartab
values( 8890 , '001407000001DD2E' , 228 , '2019-12-20 02:52:05.863');
ALTER TABLE test_chartab SET (timescaledb.compress, timescaledb.compress_segmentby = 'mac_id', timescaledb.compress_orderby = 'ts DESC');
select * from test_chartab order by mac_id , ts limit 2;
 job_run_id |      mac_id      | rtt |              ts              
------------+------------------+-----+------------------------------
       8864 | 0014070000006190 | 392 | Sat Dec 14 02:52:05.863 2019
       8864 | 0014070000011039 | 150 | Sat Dec 14 02:52:05.863 2019
(2 rows)

--compress the data and check --
SELECT compress_chunk('_timescaledb_internal._hyper_1_1_chunk');
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

select * from test_chartab order by mac_id , ts limit 2;
 job_run_id |      mac_id      | rtt |              ts              
------------+------------------+-----+------------------------------
       8864 | 0014070000006190 | 392 | Sat Dec 14 02:52:05.863 2019
       8864 | 0014070000011039 | 150 | Sat Dec 14 02:52:05.863 2019
(2 rows)

SELECT compress_chunk('_timescaledb_internal._hyper_1_2_chunk');
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_1_2_chunk
(1 row)

select * from test_chartab order by mac_id , ts limit 2;
 job_run_id |      mac_id      | rtt |              ts              
------------+------------------+-----+------------------------------
       8864 | 0014070000006190 | 392 | Sat Dec 14 02:52:05.863 2019
       8864 | 0014070000011039 | 150 | Sat Dec 14 02:52:05.863 2019
(2 rows)

-- test constraintawareappend sort node handling
SET enable_hashagg TO false;
CREATE TABLE public.merge_sort (time timestamp NOT NULL, measure_id integer NOT NULL, device_id integer NOT NULL, value float);
SELECT create_hypertable('merge_sort', 'time');
WARNING:  column type "timestamp without time zone" used for "time" does not follow best practices
    create_hypertable    
-------------------------
 (3,public,merge_sort,t)
(1 row)

ALTER TABLE merge_sort SET (timescaledb.compress = true, timescaledb.compress_orderby = 'time', timescaledb.compress_segmentby = 'device_id, measure_id');
INSERT INTO merge_sort SELECT time, 1, 1, extract(epoch from time) * 0.001 FROM generate_series('2000-01-01'::timestamp,'2000-02-01'::timestamp,'1h'::interval) g1(time);
ANALYZE merge_sort;
--compress first chunk
SELECT
  compress_chunk(c.schema_name || '.' || c.table_name)
FROM _timescaledb_catalog.chunk c
  INNER JOIN _timescaledb_catalog.hypertable ht ON c.hypertable_id=ht.id
WHERE ht.table_name = 'merge_sort'
ORDER BY c.id LIMIT 1;
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_3_5_chunk
(1 row)

-- this should have a MergeAppend with children wrapped in Sort nodes
EXPLAIN (analyze,costs off,timing off,summary off) SELECT
  last(time, time) as time,
  device_id,
  measure_id,
  last(value, time) AS value
FROM merge_sort
WHERE time < now()
GROUP BY 2, 3;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate (actual rows=1 loops=1)
   Group Key: merge_sort.device_id, merge_sort.measure_id
   ->  Custom Scan (ConstraintAwareAppend) (actual rows=745 loops=1)
         Hypertable: merge_sort
         Chunks excluded during startup: 0
         ->  Merge Append (actual rows=745 loops=1)
               Sort Key: _hyper_3_5_chunk.device_id, _hyper_3_5_chunk.measure_id
               ->  Custom Scan (DecompressChunk) on _hyper_3_5_chunk (actual rows=120 loops=1)
                     Filter: ("time" < now())
                     ->  Index Scan using compress_hyper_4_6_chunk__compressed_hypertable_4_device_id_mea on compress_hyper_4_6_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=168 loops=1)
                     Sort Key: _hyper_3_7_chunk.device_id, _hyper_3_7_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_7_chunk (actual rows=168 loops=1)
                           Filter: ("time" < now())
               ->  Sort (actual rows=168 loops=1)
                     Sort Key: _hyper_3_9_chunk.device_id, _hyper_3_9_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_9_chunk (actual rows=168 loops=1)
                           Filter: ("time" < now())
               ->  Sort (actual rows=168 loops=1)
                     Sort Key: _hyper_3_11_chunk.device_id, _hyper_3_11_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_11_chunk (actual rows=168 loops=1)
                           Filter: ("time" < now())
               ->  Sort (actual rows=121 loops=1)
                     Sort Key: _hyper_3_13_chunk.device_id, _hyper_3_13_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_13_chunk (actual rows=121 loops=1)
                           Filter: ("time" < now())
(30 rows)

-- this should exclude the decompressed chunk
EXPLAIN (analyze,costs off,timing off,summary off) SELECT
  last(time, time) as time,
  device_id,
  measure_id,
  last(value, time) AS value
FROM merge_sort
WHERE time > '2000-01-10'::text::timestamp
GROUP BY 2, 3;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 GroupAggregate (actual rows=1 loops=1)
   Group Key: merge_sort.device_id, merge_sort.measure_id
   ->  Custom Scan (ConstraintAwareAppend) (actual rows=528 loops=1)
         Hypertable: merge_sort
         Chunks excluded during startup: 1
         ->  Merge Append (actual rows=528 loops=1)
               Sort Key: _hyper_3_7_chunk.device_id, _hyper_3_7_chunk.measure_id
               ->  Sort (actual rows=71 loops=1)
                     Sort Key: _hyper_3_7_chunk.device_id, _hyper_3_7_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_7_chunk (actual rows=71 loops=1)
                           Filter: ("time" > ('2000-01-10'::cstring)::timestamp without time zone)
                           Rows Removed by Filter: 97
               ->  Sort (actual rows=168 loops=1)
                     Sort Key: _hyper_3_9_chunk.device_id, _hyper_3_9_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_9_chunk (actual rows=168 loops=1)
                           Filter: ("time" > ('2000-01-10'::cstring)::timestamp without time zone)
               ->  Sort (actual rows=168 loops=1)
                     Sort Key: _hyper_3_11_chunk.device_id, _hyper_3_11_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_11_chunk (actual rows=168 loops=1)
                           Filter: ("time" > ('2000-01-10'::cstring)::timestamp without time zone)
               ->  Sort (actual rows=121 loops=1)
                     Sort Key: _hyper_3_13_chunk.device_id, _hyper_3_13_chunk.measure_id
                     Sort Method: quicksort 
                     ->  Seq Scan on _hyper_3_13_chunk (actual rows=121 loops=1)
                           Filter: ("time" > ('2000-01-10'::cstring)::timestamp without time zone)
(28 rows)

RESET enable_hashagg;
-- test if volatile function quals are applied to compressed chunks
CREATE FUNCTION check_equal_228( intval INTEGER) RETURNS BOOL
LANGUAGE PLPGSQL AS
$BODY$
DECLARE
    retval BOOL;
BEGIN
   IF intval = 228 THEN RETURN TRUE;
   ELSE RETURN FALSE;
   END IF;
END;
$BODY$;
-- the function cannot be pushed down to compressed chunk
-- but should be applied as a filter on decompresschunk
SELECT * from test_chartab
WHERE check_equal_228(rtt) ORDER BY ts;
 job_run_id |      mac_id      | rtt |              ts              
------------+------------------+-----+------------------------------
       8864 | 001407000001DD2E | 228 | Sat Dec 14 02:52:05.863 2019
       8890 | 001407000001DD2E | 228 | Fri Dec 20 02:52:05.863 2019
(2 rows)

EXPLAIN (analyze,costs off,timing off,summary off)
SELECT * from test_chartab
WHERE check_equal_228(rtt) and ts < '2019-12-15 00:00:00' order by ts;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on test_chartab (actual rows=1 loops=1)
   Order: test_chartab.ts
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_1_1_chunk (actual rows=1 loops=1)
         Filter: ((ts < 'Sun Dec 15 00:00:00 2019'::timestamp without time zone) AND check_equal_228(rtt))
         Rows Removed by Filter: 2
         ->  Sort (actual rows=3 loops=1)
               Sort Key: compress_hyper_2_3_chunk._ts_meta_min_1
               Sort Method: quicksort 
               ->  Seq Scan on compress_hyper_2_3_chunk (actual rows=3 loops=1)
                     Filter: (_ts_meta_min_1 < 'Sun Dec 15 00:00:00 2019'::timestamp without time zone)
(11 rows)

-- test pseudoconstant qual #3241
CREATE TABLE pseudo(time timestamptz NOT NULL);
SELECT create_hypertable('pseudo','time');
  create_hypertable  
---------------------
 (5,public,pseudo,t)
(1 row)

ALTER TABLE pseudo SET (timescaledb.compress);
INSERT INTO pseudo SELECT '2000-01-01';
SELECT compress_chunk(show_chunks('pseudo'));
             compress_chunk              
-----------------------------------------
 _timescaledb_internal._hyper_5_15_chunk
(1 row)

SELECT * FROM pseudo WHERE now() IS NOT NULL;
             time             
------------------------------
 Sat Jan 01 00:00:00 2000 PST
(1 row)

